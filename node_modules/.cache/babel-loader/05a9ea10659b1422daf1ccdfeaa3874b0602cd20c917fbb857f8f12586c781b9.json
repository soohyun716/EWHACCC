{"ast":null,"code":"var _jsxFileName = \"/Users/josuhyeon/EWHACCC/src/context/ImageContext.js\",\n  _s = $RefreshSig$();\n/* 동시 접속자 수 증가로 인한 성능 문제를 감지하고, 이를 해결하기 위한 Context API */\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AppContext = /*#__PURE__*/createContext();\nexport const AppProvider = ({\n  children\n}) => {\n  _s();\n  const [state, setState] = useState({\n    user: null,\n    // 사용자 정보\n    concurrentUsers: 0,\n    // 동시 접속자 수\n    isPerformanceOptimized: true // 성능 최적화 상태\n  });\n\n  // 동시 접속자 수를 모니터링하는 함수\n  useEffect(() => {\n    // 동시 접속자 수를 업데이트하는 로직 (서버와 연동)\n    const interval = setInterval(() => {\n      const newConcurrentUsers = Math.floor(Math.random() * 500); // 0~500 사이의 랜덤 값\n      setState(prevState => ({\n        ...prevState,\n        concurrentUsers: newConcurrentUsers,\n        isPerformanceOptimized: newConcurrentUsers < 300 // 300명 이상일 때 최적화 필요\n      }));\n    }, 5000); // 5초마다 업데이트\n\n    return () => clearInterval(interval); // 컴포넌트 언마운트 시 인터벌 정리\n  }, []);\n\n  // 성능 최적화를 위한 함수\n  const optimizePerformance = () => {\n    if (!state.isPerformanceOptimized) {\n      console.warn(\"Performance optimization triggered: High load detected.\");\n      // 성능 최적화 로직을 추가할 수 있는 부분\n      // 기능: 불필요한 렌더링 방지, 이미지 지연 로드, 경량화된 리소스 사용 등\n    }\n  };\n\n  // 성능 최적화 상태가 변경될 때마다 최적화 함수 실행\n  useEffect(() => {\n    optimizePerformance();\n  }, [state.isPerformanceOptimized]);\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      state,\n      setState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(AppProvider, \"NVGb9HTviQXGmY+LkUf7z0Ir4o8=\");\n_c = AppProvider;\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","AppContext","AppProvider","children","_s","state","setState","user","concurrentUsers","isPerformanceOptimized","interval","setInterval","newConcurrentUsers","Math","floor","random","prevState","clearInterval","optimizePerformance","console","warn","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/josuhyeon/EWHACCC/src/context/ImageContext.js"],"sourcesContent":["/* 동시 접속자 수 증가로 인한 성능 문제를 감지하고, 이를 해결하기 위한 Context API */\nimport React, { createContext, useState, useEffect } from 'react';\n\nexport const AppContext = createContext();\n\nexport const AppProvider = ({ children }) => {\n  const [state, setState] = useState({\n    user: null, // 사용자 정보\n    concurrentUsers: 0, // 동시 접속자 수\n    isPerformanceOptimized: true, // 성능 최적화 상태\n  });\n\n  // 동시 접속자 수를 모니터링하는 함수\n  useEffect(() => {\n    // 동시 접속자 수를 업데이트하는 로직 (서버와 연동)\n    const interval = setInterval(() => {\n      const newConcurrentUsers = Math.floor(Math.random() * 500); // 0~500 사이의 랜덤 값\n      setState((prevState) => ({\n        ...prevState,\n        concurrentUsers: newConcurrentUsers,\n        isPerformanceOptimized: newConcurrentUsers < 300, // 300명 이상일 때 최적화 필요\n      }));\n    }, 5000); // 5초마다 업데이트\n\n    return () => clearInterval(interval); // 컴포넌트 언마운트 시 인터벌 정리\n  }, []);\n\n  // 성능 최적화를 위한 함수\n  const optimizePerformance = () => {\n    if (!state.isPerformanceOptimized) {\n      console.warn(\"Performance optimization triggered: High load detected.\");\n      // 성능 최적화 로직을 추가할 수 있는 부분\n      // 기능: 불필요한 렌더링 방지, 이미지 지연 로드, 경량화된 리소스 사용 등\n    }\n  };\n\n  // 성능 최적화 상태가 변경될 때마다 최적화 함수 실행\n  useEffect(() => {\n    optimizePerformance();\n  }, [state.isPerformanceOptimized]);\n\n  return (\n    <AppContext.Provider value={{ state, setState }}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElE,OAAO,MAAMC,UAAU,gBAAGL,aAAa,CAAC,CAAC;AAEzC,OAAO,MAAMM,WAAW,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC3C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC;IACjCU,IAAI,EAAE,IAAI;IAAE;IACZC,eAAe,EAAE,CAAC;IAAE;IACpBC,sBAAsB,EAAE,IAAI,CAAE;EAChC,CAAC,CAAC;;EAEF;EACAX,SAAS,CAAC,MAAM;IACd;IACA,MAAMY,QAAQ,GAAGC,WAAW,CAAC,MAAM;MACjC,MAAMC,kBAAkB,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;MAC5DT,QAAQ,CAAEU,SAAS,KAAM;QACvB,GAAGA,SAAS;QACZR,eAAe,EAAEI,kBAAkB;QACnCH,sBAAsB,EAAEG,kBAAkB,GAAG,GAAG,CAAE;MACpD,CAAC,CAAC,CAAC;IACL,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;;IAEV,OAAO,MAAMK,aAAa,CAACP,QAAQ,CAAC,CAAC,CAAC;EACxC,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMQ,mBAAmB,GAAGA,CAAA,KAAM;IAChC,IAAI,CAACb,KAAK,CAACI,sBAAsB,EAAE;MACjCU,OAAO,CAACC,IAAI,CAAC,yDAAyD,CAAC;MACvE;MACA;IACF;EACF,CAAC;;EAED;EACAtB,SAAS,CAAC,MAAM;IACdoB,mBAAmB,CAAC,CAAC;EACvB,CAAC,EAAE,CAACb,KAAK,CAACI,sBAAsB,CAAC,CAAC;EAElC,oBACET,OAAA,CAACC,UAAU,CAACoB,QAAQ;IAACC,KAAK,EAAE;MAAEjB,KAAK;MAAEC;IAAS,CAAE;IAAAH,QAAA,EAC7CA;EAAQ;IAAAoB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACU,CAAC;AAE1B,CAAC;AAACtB,EAAA,CAzCWF,WAAW;AAAAyB,EAAA,GAAXzB,WAAW;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}